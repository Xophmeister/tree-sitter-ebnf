translation_unit ::=  (  _top_level_item )*

_top_level_item ::=  ( function_definition |  linkage_specification |  declaration |  _statement |  type_definition |  _empty_declaration |  preproc_if |  preproc_ifdef |  preproc_include |  preproc_def |  preproc_function_def |  preproc_call )

preproc_include ::=  ( (  '#'[ #x9]*'include' )  (  ( string_literal |  system_lib_string |  identifier |  (  preproc_call_expression )  )  )  '\n'  )

preproc_def ::=  ( (  '#'[ #x9]*'define' )  (  identifier )  (  ( preproc_arg )?  )  '\n'  )

preproc_function_def ::=  ( (  '#'[ #x9]*'define' )  (  identifier )  (  preproc_params )  (  ( preproc_arg )?  )  '\n'  )

preproc_params ::=  ( (  '('  )  ( ( ( identifier |  '...'  )  (  ( ','  ( identifier |  '...'  )  )  )*  )  )?  ')'  )

preproc_call ::=  ( (  preproc_directive )  (  ( preproc_arg )?  )  '\n'  )

preproc_if ::=  ( (  '#'[ #x9]*'if' )  (  _preproc_expression )  '\n'  (  _top_level_item )*  (  ( ( preproc_else |  preproc_elif )  )?  )  (  '#'[ #x9]*'endif' )  )

preproc_ifdef ::=  ( ( (  '#'[ #x9]*'ifdef' )  |  (  '#'[ #x9]*'ifndef' )  )  (  identifier )  (  _top_level_item )*  (  ( ( preproc_else |  preproc_elif )  )?  )  (  '#'[ #x9]*'endif' )  )

preproc_else ::=  ( (  '#'[ #x9]*'else' )  (  _top_level_item )*  )

preproc_elif ::=  ( (  '#'[ #x9]*'elif' )  (  _preproc_expression )  '\n'  (  _top_level_item )*  (  ( ( preproc_else |  preproc_elif )  )?  )  )

preproc_if_in_field_declaration_list ::=  ( (  '#'[ #x9]*'if' )  (  _preproc_expression )  '\n'  (  _field_declaration_list_item )*  (  ( ( (  preproc_else_in_field_declaration_list )  |  (  preproc_elif_in_field_declaration_list )  )  )?  )  (  '#'[ #x9]*'endif' )  )

preproc_ifdef_in_field_declaration_list ::=  ( ( (  '#'[ #x9]*'ifdef' )  |  (  '#'[ #x9]*ifndef )  )  (  identifier )  (  _field_declaration_list_item )*  (  ( ( (  preproc_else_in_field_declaration_list )  |  (  preproc_elif_in_field_declaration_list )  )  )?  )  (  '#'[ #x9]*'endif' )  )

preproc_else_in_field_declaration_list ::=  ( (  '#'[ #x9]*'else' )  (  _field_declaration_list_item )*  )

preproc_elif_in_field_declaration_list ::=  ( (  '#'[ #x9]*'elif' )  (  _preproc_expression )  '\n'  (  _field_declaration_list_item )*  (  ( ( (  preproc_else_in_field_declaration_list )  |  (  preproc_elif_in_field_declaration_list )  )  )?  )  )

preproc_directive ::=  '#'[ #x9]*[a-zA-Z][_a-zA-Z0-9]*

preproc_arg ::=  (   (  ( '.'|"\\\r"?"\n" )+  )  )*

_preproc_expression ::=  ( identifier |  (  preproc_call_expression )  |  number_literal |  char_literal |  preproc_defined |  (  preproc_unary_expression )  |  (  preproc_binary_expression )  |  (  preproc_parenthesized_expression )  )

preproc_parenthesized_expression ::=  ( '('  _preproc_expression ')'  )

preproc_defined ::=  (  (  ( 'defined'  '('  identifier ')'  )  )  |  ( 'defined'  identifier )  )

preproc_unary_expression ::=   (  ( (  ( '!'  |  '~'  |  '-'  |  '+'  )  )  (  _preproc_expression )  )  )

preproc_call_expression ::=   (  ( (  identifier )  (  (  preproc_argument_list )  )  )  )

preproc_argument_list ::=  ( '('  ( ( _preproc_expression (  ( ','  _preproc_expression )  )*  )  )?  ')'  )

preproc_binary_expression ::=  (  (  ( (  _preproc_expression )  (  '+'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '-'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '*'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '/'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '%'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '||'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '&&'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '|'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '^'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '&'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '=='  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '!='  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '>'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '>='  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '<='  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '<'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '<<'  )  (  _preproc_expression )  )  )  |   (  ( (  _preproc_expression )  (  '>>'  )  (  _preproc_expression )  )  )  )

function_definition ::=  ( ( ms_call_modifier )?  _declaration_specifiers (  _declarator )  (  compound_statement )  )

declaration ::=  ( _declaration_specifiers ( (  ( _declarator |  init_declarator )  )  (  ( ','  (  ( _declarator |  init_declarator )  )  )  )*  )  ';'  )

type_definition ::=  ( 'typedef'  (  type_qualifier )*  (  _type_specifier )  ( (  _type_declarator )  (  ( ','  (  _type_declarator )  )  )*  )  ';'  )

_declaration_specifiers ::=  ( (  ( storage_class_specifier |  type_qualifier |  attribute_specifier |  ms_declspec_modifier )  )*  (  _type_specifier )  (  ( storage_class_specifier |  type_qualifier |  attribute_specifier |  ms_declspec_modifier )  )*  )

linkage_specification ::=  ( 'extern'  (  string_literal )  (  ( function_definition |  declaration |  declaration_list )  )  )

attribute_specifier ::=  ( '__attribute__'  '('  argument_list ')'  )

ms_declspec_modifier ::=  ( '__declspec'  '('  identifier ')'  )

ms_based_modifier ::=  ( '__based'  argument_list )

ms_call_modifier ::=  ( '__cdecl'  |  '__clrcall'  |  '__stdcall'  |  '__fastcall'  |  '__thiscall'  |  '__vectorcall'  )

ms_restrict_modifier ::=  '__restrict'

ms_unsigned_ptr_modifier ::=  '__uptr'

ms_signed_ptr_modifier ::=  '__sptr'

ms_unaligned_ptr_modifier ::=  ( '_unaligned'  |  '__unaligned'  )

ms_pointer_modifier ::=  ( ms_unaligned_ptr_modifier |  ms_restrict_modifier |  ms_unsigned_ptr_modifier |  ms_signed_ptr_modifier )

declaration_list ::=  ( '{'  (  _top_level_item )*  '}'  )

_declarator ::=  ( pointer_declarator |  function_declarator |  array_declarator |  parenthesized_declarator |  identifier )

_field_declarator ::=  ( (  pointer_field_declarator )  |  (  function_field_declarator )  |  (  array_field_declarator )  |  (  parenthesized_field_declarator )  |  _field_identifier )

_type_declarator ::=  ( (  pointer_type_declarator )  |  (  function_type_declarator )  |  (  array_type_declarator )  |  (  parenthesized_type_declarator )  |  _type_identifier )

_abstract_declarator ::=  ( abstract_pointer_declarator |  abstract_function_declarator |  abstract_array_declarator |  abstract_parenthesized_declarator )

parenthesized_declarator ::=   (  ( '('  _declarator ')'  )  )

parenthesized_field_declarator ::=   (  ( '('  _field_declarator ')'  )  )

parenthesized_type_declarator ::=   (  ( '('  _type_declarator ')'  )  )

abstract_parenthesized_declarator ::=   (  ( '('  _abstract_declarator ')'  )  )

pointer_declarator ::=   (   (  ( ( ms_based_modifier )?  '*'  (  ms_pointer_modifier )*  (  type_qualifier )*  (  _declarator )  )  )  )

pointer_field_declarator ::=   (   (  ( ( ms_based_modifier )?  '*'  (  ms_pointer_modifier )*  (  type_qualifier )*  (  _field_declarator )  )  )  )

pointer_type_declarator ::=   (   (  ( ( ms_based_modifier )?  '*'  (  ms_pointer_modifier )*  (  type_qualifier )*  (  _type_declarator )  )  )  )

abstract_pointer_declarator ::=   (   (  ( '*'  (  type_qualifier )*  (  ( _abstract_declarator )?  )  )  )  )

function_declarator ::=   (  ( (  _declarator )  (  parameter_list )  (  attribute_specifier )*  )  )

function_field_declarator ::=   (  ( (  _field_declarator )  (  parameter_list )  )  )

function_type_declarator ::=   (  ( (  _type_declarator )  (  parameter_list )  )  )

abstract_function_declarator ::=   (  ( (  ( _abstract_declarator )?  )  (  parameter_list )  )  )

array_declarator ::=   (  ( (  _declarator )  '['  (  type_qualifier )*  (  ( ( _expression |  '*'  )  )?  )  ']'  )  )

array_field_declarator ::=   (  ( (  _field_declarator )  '['  (  type_qualifier )*  (  ( ( _expression |  '*'  )  )?  )  ']'  )  )

array_type_declarator ::=   (  ( (  _type_declarator )  '['  (  type_qualifier )*  (  ( ( _expression |  '*'  )  )?  )  ']'  )  )

abstract_array_declarator ::=   (  ( (  ( _abstract_declarator )?  )  '['  (  type_qualifier )*  (  ( ( _expression |  '*'  )  )?  )  ']'  )  )

init_declarator ::=  ( (  _declarator )  '='  (  ( initializer_list |  _expression )  )  )

compound_statement ::=  ( '{'  (  _top_level_item )*  '}'  )

storage_class_specifier ::=  ( 'extern'  |  'static'  |  'auto'  |  'register'  |  'inline'  )

type_qualifier ::=  ( 'const'  |  'volatile'  |  'restrict'  |  '_Atomic'  )

_type_specifier ::=  ( struct_specifier |  union_specifier |  enum_specifier |  macro_type_specifier |  sized_type_specifier |  primitive_type |  _type_identifier )

sized_type_specifier ::=  ( ( ( 'signed'  |  'unsigned'  |  'long'  |  'short'  )  )+  (  ( (  (  _type_identifier )  |  primitive_type )  )?  )  )

primitive_type ::=  (  ( 'bool'  |  'char'  |  'int'  |  'float'  |  'double'  |  'void'  |  'size_t'  |  'ssize_t'  |  'intptr_t'  |  'uintptr_t'  |  'charptr_t'  |  'int8_t'  |  'int16_t'  |  'int32_t'  |  'int64_t'  |  'uint8_t'  |  'uint16_t'  |  'uint32_t'  |  'uint64_t'  |  'char8_t'  |  'char16_t'  |  'char32_t'  |  'char64_t'  )  )*

enum_specifier ::=  ( 'enum'  ( ( (  _type_identifier )  (  ( enumerator_list )?  )  )  |  (  enumerator_list )  )  )

enumerator_list ::=  ( '{'  ( ( enumerator (  ( ','  enumerator )  )*  )  )?  ( ','  )?  '}'  )

struct_specifier ::=  ( 'struct'  ( ms_declspec_modifier )?  ( ( (  _type_identifier )  (  ( field_declaration_list )?  )  )  |  (  field_declaration_list )  )  )

union_specifier ::=  ( 'union'  ( ms_declspec_modifier )?  ( ( (  _type_identifier )  (  ( field_declaration_list )?  )  )  |  (  field_declaration_list )  )  )

field_declaration_list ::=  ( '{'  (  _field_declaration_list_item )*  '}'  )

_field_declaration_list_item ::=  ( field_declaration |  preproc_def |  preproc_function_def |  preproc_call |  (  preproc_if_in_field_declaration_list )  |  (  preproc_ifdef_in_field_declaration_list )  )

field_declaration ::=  ( _declaration_specifiers ( ( (  _field_declarator )  (  ( ','  (  _field_declarator )  )  )*  )  )?  ( bitfield_clause )?  ';'  )

bitfield_clause ::=  ( ':'  _expression )

enumerator ::=  ( (  identifier )  ( ( '='  (  _expression )  )  )?  )

parameter_list ::=  ( '('  ( ( ( parameter_declaration |  '...'  )  (  ( ','  ( parameter_declaration |  '...'  )  )  )*  )  )?  ')'  )

parameter_declaration ::=  ( _declaration_specifiers ( (  ( _declarator |  _abstract_declarator )  )  )?  )

_statement ::=  ( case_statement |  _non_case_statement )

_non_case_statement ::=  ( labeled_statement |  compound_statement |  expression_statement |  if_statement |  switch_statement |  do_statement |  while_statement |  for_statement |  return_statement |  break_statement |  continue_statement |  goto_statement )

labeled_statement ::=  ( (  _statement_identifier )  ':'  _statement )

expression_statement ::=  ( ( ( _expression |  comma_expression )  )?  ';'  )

if_statement ::=   (  ( 'if'  (  parenthesized_expression )  (  _statement )  ( ( 'else'  (  _statement )  )  )?  )  )

switch_statement ::=  ( 'switch'  (  parenthesized_expression )  (  compound_statement )  )

case_statement ::=   (  ( ( ( 'case'  (  _expression )  )  |  'default'  )  ':'  (  ( _non_case_statement |  declaration |  type_definition )  )*  )  )

while_statement ::=  ( 'while'  (  parenthesized_expression )  (  _statement )  )

do_statement ::=  ( 'do'  (  _statement )  'while'  (  parenthesized_expression )  ';'  )

for_statement ::=  ( 'for'  '('  ( (  declaration )  |  ( (  ( ( _expression |  comma_expression )  )?  )  ';'  )  )  (  ( _expression )?  )  ';'  (  ( ( _expression |  comma_expression )  )?  )  ')'  _statement )

return_statement ::=  ( 'return'  ( ( _expression |  comma_expression )  )?  ';'  )

break_statement ::=  ( 'break'  ';'  )

continue_statement ::=  ( 'continue'  ';'  )

goto_statement ::=  ( 'goto'  (  _statement_identifier )  ';'  )

_expression ::=  ( conditional_expression |  assignment_expression |  binary_expression |  unary_expression |  update_expression |  cast_expression |  pointer_expression |  sizeof_expression |  subscript_expression |  call_expression |  field_expression |  compound_literal_expression |  identifier |  number_literal |  string_literal |  true |  false |  null |  concatenated_string |  char_literal |  parenthesized_expression )

comma_expression ::=  ( (  _expression )  ','  (  ( _expression |  comma_expression )  )  )

conditional_expression ::=   (  ( (  _expression )  '?'  (  _expression )  ':'  (  _expression )  )  )

_assignment_left_expression ::=  ( identifier |  call_expression |  field_expression |  pointer_expression |  subscript_expression |  parenthesized_expression )

assignment_expression ::=   (  ( (  _assignment_left_expression )  ( '='  |  '*='  |  '/='  |  '%='  |  '+='  |  '-='  |  '<<='  |  '>>='  |  '&='  |  '^='  |  '|='  )  (  _expression )  )  )

pointer_expression ::=   (  ( (  ( '*'  |  '&'  )  )  (  _expression )  )  )

unary_expression ::=   (  ( (  ( '!'  |  '~'  |  '-'  |  '+'  )  )  (  _expression )  )  )

binary_expression ::=  (  (  ( (  _expression )  (  '+'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '-'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '*'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '/'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '%'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '||'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '&&'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '|'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '^'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '&'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '=='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '!='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '>'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '>='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '<='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '<'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '<<'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '>>'  )  (  _expression )  )  )  )

update_expression ::=   (  ( ( (  ( '--'  |  '++'  )  )  (  _expression )  )  |  ( (  _expression )  (  ( '--'  |  '++'  )  )  )  )  )

cast_expression ::=   (  ( '('  (  type_descriptor )  ')'  (  _expression )  )  )

type_descriptor ::=  ( (  type_qualifier )*  (  _type_specifier )  (  type_qualifier )*  (  ( _abstract_declarator )?  )  )

sizeof_expression ::=   (  ( 'sizeof'  ( (  _expression )  |  ( '('  (  type_descriptor )  ')'  )  )  )  )

subscript_expression ::=   (  ( (  _expression )  '['  (  _expression )  ']'  )  )

call_expression ::=   (  ( (  _expression )  (  argument_list )  )  )

argument_list ::=  ( '('  ( ( _expression (  ( ','  _expression )  )*  )  )?  ')'  )

field_expression ::=  (  (  ( (  _expression )  ( '.'  |  '->'  )  )  )  (  _field_identifier )  )

compound_literal_expression ::=  ( '('  (  type_descriptor )  ')'  (  initializer_list )  )

parenthesized_expression ::=  ( '('  ( _expression |  comma_expression )  ')'  )

initializer_list ::=  ( '{'  ( ( ( initializer_pair |  _expression |  initializer_list )  (  ( ','  ( initializer_pair |  _expression |  initializer_list )  )  )*  )  )?  ( ','  )?  '}'  )

initializer_pair ::=  ( (  ( ( subscript_designator |  field_designator )  )+  )  '='  (  ( _expression |  initializer_list )  )  )

subscript_designator ::=  ( '['  _expression ']'  )

field_designator ::=  ( '.'  _field_identifier )

number_literal ::=  (  ( ( [-\+] )?  ( ( '0x'  |  '0b'  )  )?  ( ( ( ( ( [0-9] )+  (  ( "'"  ( [0-9] )+  )  )*  )  |  ( '0b'  ( ( [0-9] )+  (  ( "'"  ( [0-9] )+  )  )*  )  )  |  ( '0x'  ( ( [0-9a-fA-F] )+  (  ( "'"  ( [0-9a-fA-F] )+  )  )*  )  )  )  ( ( '.'  ( ( ( [0-9a-fA-F] )+  (  ( "'"  ( [0-9a-fA-F] )+  )  )*  )  )?  )  )?  )  |  ( '.'  ( ( [0-9] )+  (  ( "'"  ( [0-9] )+  )  )*  )  )  )  ( ( [eEpP] ( ( ( [-\+] )?  ( ( [0-9a-fA-F] )+  (  ( "'"  ( [0-9a-fA-F] )+  )  )*  )  )  )?  )  )?  (  ( 'u'  |  'l'  |  'U'  |  'L'  |  'f'  |  'F'  )  )*  )  )*

char_literal ::=  ( ( "L'"  |  "u'"  |  "U'"  |  "u8'"  |  "'"  )  ( escape_sequence |  (  [^\n'] )  )  "'"  )

concatenated_string ::=  ( string_literal ( string_literal )+  )

string_literal ::=  ( ( 'L"'  |  'u"'  |  'U"'  |  'u8"'  |  '"'  )  (  ( (   (  [^\\"\n]+ )  )  |  escape_sequence )  )*  '"'  )

escape_sequence ::=  (   (  ( '\\'  ( [^xuU] |  [0-9] |  'x'[0-9a-fA-F] |  'u'[0-9a-fA-F] |  'U'[0-9a-fA-F] )  )  )  )*

system_lib_string ::=  (  ( '<'  (  ( [^>\n] |  '\\>'  )  )*  '>'  )  )*

true ::=  (  ( 'TRUE'  |  'true'  )  )*

false ::=  (  ( 'FALSE'  |  'false'  )  )*

null ::=  'NULL'

identifier ::=  [a-zA-Z_][a-zA-Z_0-9]*

_type_identifier ::=  (  identifier )

_field_identifier ::=  (  identifier )

_statement_identifier ::=  (  identifier )

_empty_declaration ::=  ( _type_specifier ';'  )

macro_type_specifier ::=   (  ( (  identifier )  '('  (  type_descriptor )  ')'  )  )

comment ::=  (  ( ( '//'  ('\\'('.'|'\r'?'\n')|[^\\\n])* )  |  ( '/*'  [^*]*'*'+([^/*][^*]*'*'+)* '/'  )  )  )*
