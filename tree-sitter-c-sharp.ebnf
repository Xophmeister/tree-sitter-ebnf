/*
Grammar originally from https://github.com/tree-sitter/tree-sitter-c-sharp
Converted by excuting:
	qjs json2ebnf.js
Then manualy fixing the problems reported by https://www.bottlecaps.de/rr/ui in a way to allow visualization (correctnes is not the priority now)
*/

compilation_unit ::=  ( (  extern_alias_directive )*  (  using_directive )*  (  global_attribute_list )*  (  global_statement )*  (  _namespace_member_declaration )*  )

global_statement ::=  _statement

_declaration ::=  ( class_declaration |  constructor_declaration |  conversion_operator_declaration |  delegate_declaration |  destructor_declaration |  enum_declaration |  event_declaration |  event_field_declaration |  field_declaration |  indexer_declaration |  interface_declaration |  method_declaration |  namespace_declaration |  operator_declaration |  property_declaration |  record_declaration |  struct_declaration |  using_directive )

_namespace_member_declaration ::=  ( namespace_declaration |  _type_declaration )

_type_declaration ::=  ( class_declaration |  struct_declaration |  interface_declaration |  enum_declaration |  delegate_declaration |  record_declaration )

extern_alias_directive ::=  ( 'extern'  'alias'  identifier ';'  )

using_directive ::=  ( 'using'  ( ( 'static'  |  name_equals )  )?  _name ';'  )

name_equals ::=   (  ( _identifier_or_global '='  )  )

_name ::=  ( alias_qualified_name |  qualified_name |  _simple_name )

alias_qualified_name ::=  ( _identifier_or_global '::'  _simple_name )

_simple_name ::=  ( generic_name |  _identifier_or_global )

generic_name ::=  ( identifier type_argument_list )

type_argument_list ::=  ( '<'  ( (  ','  )*  |  ( _type (  ( ','  _type )  )*  )  )  '>'  )

qualified_name ::=   (  ( _name '.'  _simple_name )  )

attribute_list ::=  ( '['  ( attribute_target_specifier )?  ( attribute (  ( ','  attribute )  )*  )  ( ','  )?  ']'  )

attribute_target_specifier ::=  ( ( 'field'  |  'event'  |  'method'  |  'param'  |  'property'  |  'return'  |  'type'  )  ':'  )

attribute ::=  ( (  _name )  ( attribute_argument_list )?  )

attribute_argument_list ::=  ( '('  ( ( attribute_argument (  ( ','  attribute_argument )  )*  )  )?  ')'  )

attribute_argument ::=  ( ( ( name_equals |  name_colon )  )?  _expression )

global_attribute_list ::=  ( '['  ( 'assembly'  |  'module'  )  ':'  ( ( attribute (  ( ','  attribute )  )*  )  )?  ']'  )

name_colon ::=  ( _identifier_or_global ':'  )

event_field_declaration ::=   (  ( (  attribute_list )*  (  modifier )*  'event'  variable_declaration ';'  )  )

modifier ::=   (  ( 'abstract'  |  'async'  |  'const'  |  'extern'  |  'fixed'  |  'internal'  |  'new'  |  'override'  |  'partial'  |  'private'  |  'protected'  |  'public'  |  'readonly'  |   (  'ref'  )  |  'sealed'  |  'static'  |  'unsafe'  |  'virtual'  |  'volatile'  )  )

variable_declaration ::=  ( (  _type )  ( variable_declarator (  ( ','  variable_declarator )  )*  )  )

variable_declarator ::=  ( ( identifier |  tuple_pattern )  ( bracketed_argument_list )?  ( equals_value_clause )?  )

bracketed_argument_list ::=  ( '['  ( argument (  ( ','  argument )  )*  )  ']'  )

tuple_pattern ::=  ( '('  ( ( identifier |  discard |  tuple_pattern )  (  ( ','  ( identifier |  discard |  tuple_pattern )  )  )*  )  ')'  )

argument ::=   (  ( ( name_colon )?  ( ( 'ref'  |  'out'  |  'in'  )  )?  ( _expression |  declaration_expression )  )  )

equals_value_clause ::=  ( '='  _expression )

field_declaration ::=  ( (  attribute_list )*  (  modifier )*  variable_declaration ';'  )

constructor_declaration ::=  ( (  attribute_list )*  (  modifier )*  (  identifier )  (  parameter_list )  ( constructor_initializer )?  _function_body )

parameter_list ::=  ( '('  ( _formal_parameter_list )?  ')'  )

_formal_parameter_list ::=  ( ( parameter |  parameter_array )  (  ( ','  ( parameter |  parameter_array )  )  )*  )

parameter ::=  ( (  attribute_list )*  ( parameter_modifier )?  ( (  _type )  )?  (  identifier )  ( equals_value_clause )?  )

parameter_modifier ::=   (  ( 'ref'  |  'out'  |  'this'  |  'in'  )  )

parameter_array ::=  ( (  attribute_list )*  'params'  ( array_type |  nullable_type )  identifier )

constructor_initializer ::=  ( ':'  ( 'base'  |  'this'  )  argument_list )

argument_list ::=  ( '('  ( ( argument (  ( ','  argument )  )*  )  )?  ')'  )

block ::=  ( '{'  (  _statement )*  '}'  )

arrow_expression_clause ::=  ( '=>'  _expression )

conversion_operator_declaration ::=  ( (  attribute_list )*  (  modifier )*  ( 'implicit'  |  'explicit'  )  'operator'  (  _type )  (  parameter_list )  _function_body )

_function_body ::=  ( (  block )  |  ( (  arrow_expression_clause )  ';'  )  |  ';'  )

destructor_declaration ::=  ( (  attribute_list )*  ( 'extern'  )?  '~'  identifier parameter_list _function_body )

method_declaration ::=  ( (  attribute_list )*  (  modifier )*  (  return_type )  ( explicit_interface_specifier )?  (  identifier )  (  ( type_parameter_list )?  )  (  parameter_list )  (  type_parameter_constraints_clause )*  _function_body )

explicit_interface_specifier ::=   (  ( _name '.'  )  )

type_parameter_list ::=  ( '<'  ( type_parameter (  ( ','  type_parameter )  )*  )  '>'  )

type_parameter ::=  ( (  attribute_list )*  ( ( 'in'  |  'out'  )  )?  identifier )

type_parameter_constraints_clause ::=  ( 'where'  (  _identifier_or_global )  ':'  (  ( type_parameter_constraint (  ( ','  type_parameter_constraint )  )*  )  )  )

type_parameter_constraint ::=  ( ( 'class'  ( '?'  )?  )  |  'struct'  |  'notnull'  |  'unmanaged'  |  constructor_constraint |  type_constraint )

constructor_constraint ::=  ( 'new'  '('  ')'  )

type_constraint ::=  (  _type )

operator_declaration ::=  ( (  attribute_list )*  (  modifier )*  (  _type )  'operator'  (  _overloadable_operator )  (  parameter_list )  _function_body )

_overloadable_operator ::=  ( '!'  |  '~'  |  '++'  |  '--'  |  'true'  |  'false'  |  '+'  |  '-'  |  '*'  |  '/'  |  '%'  |  '^'  |  '|'  |  '&'  |  '<<'  |  '>>'  |  '=='  |  '!='  |  '>'  |  '<'  |  '>='  |  '<='  )

event_declaration ::=  ( (  attribute_list )*  (  modifier )*  'event'  (  _type )  ( explicit_interface_specifier )?  (  identifier )  ( (  accessor_list )  |  ';'  )  )

accessor_list ::=  ( '{'  (  accessor_declaration )*  '}'  )

accessor_declaration ::=  ( (  attribute_list )*  (  modifier )*  ( 'get'  |  'set'  |  'add'  |  'remove'  |  'init'  |  identifier )  _function_body )

indexer_declaration ::=  ( (  attribute_list )*  (  modifier )*  (  _type )  ( explicit_interface_specifier )?  'this'  (  bracketed_parameter_list )  ( (  accessor_list )  |  ( (  arrow_expression_clause )  ';'  )  )  )

bracketed_parameter_list ::=  ( '['  ( parameter (  ( ','  parameter )  )*  )  ']'  )

property_declaration ::=  ( (  attribute_list )*  (  modifier )*  (  _type )  ( explicit_interface_specifier )?  (  identifier )  ( ( (  accessor_list )  ( ( '='  (  _expression )  ';'  )  )?  )  |  ( (  arrow_expression_clause )  ';'  )  )  )

enum_declaration ::=  ( (  attribute_list )*  (  modifier )*  'enum'  (  identifier )  (  ( base_list )?  )  (  enum_member_declaration_list )  ( ';'  )?  )

base_list ::=  ( ':'  ( _type (  ( ','  _type )  )*  )  )

enum_member_declaration_list ::=  ( '{'  ( ( enum_member_declaration (  ( ','  enum_member_declaration )  )*  )  )?  ( ','  )?  '}'  )

enum_member_declaration ::=  ( (  attribute_list )*  (  identifier )  ( ( '='  (  _expression )  )  )?  )

class_declaration ::=  ( (  attribute_list )*  (  modifier )*  'class'  (  identifier )  (  ( type_parameter_list )?  )  (  ( base_list )?  )  (  type_parameter_constraints_clause )*  (  declaration_list )  ( ';'  )?  )

declaration_list ::=  ( '{'  (  _declaration )*  '}'  )

interface_declaration ::=  ( (  attribute_list )*  (  modifier )*  'interface'  (  identifier )  (  ( type_parameter_list )?  )  (  ( base_list )?  )  (  type_parameter_constraints_clause )*  (  declaration_list )  ( ';'  )?  )

struct_declaration ::=  ( (  attribute_list )*  (  modifier )*  'struct'  (  identifier )  (  ( type_parameter_list )?  )  (  ( base_list )?  )  (  type_parameter_constraints_clause )*  (  declaration_list )  ( ';'  )?  )

delegate_declaration ::=  ( (  attribute_list )*  (  modifier )*  'delegate'  (  return_type )  (  identifier )  (  ( type_parameter_list )?  )  (  parameter_list )  (  type_parameter_constraints_clause )*  ';'  )

record_declaration ::=  ( (  attribute_list )*  (  modifier )*  'record'  (  identifier )  (  ( type_parameter_list )?  )  (  ( parameter_list )?  )  (  ( (  record_base )  )?  )  (  type_parameter_constraints_clause )*  (  _record_base )  )

record_base ::=  ( ( ':'  ( identifier (  ( ','  identifier )  )*  )  )  |  ( ':'  primary_constructor_base_type ( ( ','  ( identifier (  ( ','  identifier )  )*  )  )  )?  )  )

primary_constructor_base_type ::=  ( identifier argument_list )

_record_base ::=  ( declaration_list |  ';'  )

namespace_declaration ::=  ( 'namespace'  (  _name )  (  declaration_list )  ( ';'  )?  )

_type ::=  ( implicit_type |  array_type |  _name |  nullable_type |  pointer_type |  function_pointer_type |  predefined_type |  tuple_type )

implicit_type ::=  'var'

array_type ::=   (  ( (  _type )  (  array_rank_specifier )  )  )

array_rank_specifier ::=  ( '['  ( ( ( _expression )?  (  ( ','  ( _expression )?  )  )*  )  )?  ']'  )

nullable_type ::=  (  (  ( _type '?'  )  )  |   (  ( _type '?'  )  )  )

pointer_type ::=   (  ( _type '*'  )  )

function_pointer_type ::=  ( 'delegate'  '*'  ( function_pointer_calling_convention )?  '<'  ( function_pointer_parameter (  ( ','  function_pointer_parameter )  )*  )  '>'  )

function_pointer_calling_convention ::=  ( 'managed'  |  ( 'unmanaged'  ( function_pointer_unmanaged_calling_convention_list )?  )  )

function_pointer_unmanaged_calling_convention_list ::=  ( '['  ( function_pointer_unmanaged_calling_convention (  ( ','  function_pointer_unmanaged_calling_convention )  )*  )  ']'  )

function_pointer_unmanaged_calling_convention ::=  ( 'Cdecl'  |  'Stdcall'  |  'Thiscall'  |  'Fastcall'  |  identifier )

function_pointer_parameter ::=  ( ( ( 'ref'  |  'out'  |  'in'  |  ( 'ref'  'readonly'  )  )  )?  ( _type |  void_keyword )  )

predefined_type ::=  (  ( 'bool'  |  'byte'  |  'char'  |  'decimal'  |  'double'  |  'float'  |  'int'  |  'long'  |  'object'  |  'sbyte'  |  'short'  |  'string'  |  'uint'  |  'ulong'  |  'ushort'  |  'nint'  |  'nuint'  )  )*

ref_type ::=  ( 'ref'  ( 'readonly'  )?  _type )

tuple_type ::=  ( '('  tuple_element ','  ( tuple_element (  ( ','  tuple_element )  )*  )  ')'  )

tuple_element ::=   (  ( (  _type )  (  ( identifier )?  )  )  )

_statement ::=  ( block |  break_statement |  checked_statement |  continue_statement |  do_statement |  empty_statement |  expression_statement |  fixed_statement |  for_each_statement |  for_statement |  goto_statement |  if_statement |  labeled_statement |  local_declaration_statement |  local_function_statement |  lock_statement |  return_statement |  switch_statement |  throw_statement |  try_statement |  unsafe_statement |  using_statement |  while_statement |  yield_statement )

break_statement ::=  ( 'break'  ';'  )

checked_statement ::=  ( ( 'checked'  |  'unchecked'  )  block )

continue_statement ::=  ( 'continue'  ';'  )

do_statement ::=  ( 'do'  _statement 'while'  '('  _expression ')'  ';'  )

empty_statement ::=  ';'

expression_statement ::=  ( _expression ';'  )

fixed_statement ::=  ( 'fixed'  '('  variable_declaration ')'  _statement )

for_statement ::=  ( 'for'  '('  (  ( ( variable_declaration |  ( _expression (  ( ','  _expression )  )*  )  )  )?  )  ';'  (  ( _expression )?  )  ';'  (  ( ( _expression (  ( ','  _expression )  )*  )  )?  )  ')'  (  _statement )  )

for_each_statement ::=  ( ( 'await'  )?  'foreach'  '('  ( ( (  _type )  (  ( identifier |  tuple_pattern )  )  )  |  (  _expression )  )  'in'  (  _expression )  ')'  (  _statement )  )

goto_statement ::=  ( 'goto'  ( (  identifier )  |  ( 'case'  _expression )  |  'default'  )  ';'  )

if_statement ::=   (  ( 'if'  '('  (  _expression )  ')'  (  _statement )  ( ( 'else'  (  _statement )  )  )?  )  )

labeled_statement ::=  ( (  identifier )  ':'  _statement )

local_declaration_statement ::=  ( ( 'await'  )?  ( 'using'  )?  (  modifier )*  variable_declaration ';'  )

local_function_statement ::=  ( (  attribute_list )*  (  modifier )*  (  return_type )  (  identifier )  (  ( type_parameter_list )?  )  (  parameter_list )  (  type_parameter_constraints_clause )*  _function_body )

lock_statement ::=  ( 'lock'  '('  _expression ')'  _statement )

return_statement ::=  ( 'return'  ( _expression )?  ';'  )

switch_statement ::=  ( 'switch'  ( ( '('  (  _expression )  ')'  )  |  (  tuple_expression )  )  (  switch_body )  )

switch_body ::=  ( '{'  (  switch_section )*  '}'  )

switch_section ::=   (  ( ( ( case_switch_label |  case_pattern_switch_label |  default_switch_label )  )+  ( _statement )+  )  )

case_pattern_switch_label ::=  ( 'case'  _pattern ( when_clause )?  ':'  )

_pattern ::=  ( constant_pattern |  declaration_pattern |  discard |  recursive_pattern |  var_pattern |  negated_pattern |  parenthesized_pattern |  relational_pattern |  binary_pattern |  type_pattern )

type_pattern ::=   (  _type )

parenthesized_pattern ::=  ( '('  _pattern ')'  )

relational_pattern ::=   (  ( ( '<'  _expression )  |  ( '<='  _expression )  |  ( '>'  _expression )  |  ( '>='  _expression )  )  )

negated_pattern ::=  ( 'not'  _pattern )

binary_pattern ::=  (  (  ( (  _pattern )  (  'and'  )  (  _pattern )  )  )  |   (  ( (  _pattern )  (  'or'  )  (  _pattern )  )  )  )

constant_pattern ::=   (  _expression )

declaration_pattern ::=  ( (  _type )  _variable_designation )

_variable_designation ::=   (  ( discard |  parenthesized_variable_designation |  identifier )  )

discard ::=  '_'

parenthesized_variable_designation ::=  ( '('  ( ( _variable_designation (  ( ','  _variable_designation )  )*  )  )?  ')'  )

recursive_pattern ::=   (  ( ( _type )?  ( ( positional_pattern_clause ( property_pattern_clause )?  )  |  property_pattern_clause )  ( _variable_designation )?  )  )

positional_pattern_clause ::=   (  ( '('  ( ( subpattern ','  ( subpattern (  ( ','  subpattern )  )*  )  )  )?  ')'  )  )

subpattern ::=  ( ( name_colon )?  _pattern )

property_pattern_clause ::=   (  ( '{'  ( ( subpattern (  ( ','  subpattern )  )*  )  )?  ( ','  )?  '}'  )  )

var_pattern ::=   (  ( 'var'  _variable_designation )  )

when_clause ::=  ( 'when'  _expression )

case_switch_label ::=   (  ( 'case'  _expression ':'  )  )

default_switch_label ::=   (  ( 'default'  ':'  )  )

throw_statement ::=  ( 'throw'  ( _expression )?  ';'  )

try_statement ::=  ( 'try'  (  block )  (  catch_clause )*  ( finally_clause )?  )

catch_clause ::=  ( 'catch'  ( catch_declaration )?  ( catch_filter_clause )?  (  block )  )

catch_declaration ::=  ( '('  (  _type )  (  ( identifier )?  )  ')'  )

catch_filter_clause ::=  ( 'when'  '('  _expression ')'  )

finally_clause ::=  ( 'finally'  block )

unsafe_statement ::=  ( 'unsafe'  block )

using_statement ::=  ( ( 'await'  )?  'using'  '('  ( variable_declaration |  _expression )  ')'  (  _statement )  )

while_statement ::=  ( 'while'  '('  _expression ')'  _statement )

yield_statement ::=  ( 'yield'  ( ( 'return'  _expression )  |  'break'  )  ';'  )

anonymous_method_expression ::=  ( ( 'async'  )?  'delegate'  ( parameter_list )?  block )

lambda_expression ::=   (  ( ( 'async'  )?  ( 'static'  )?  ( parameter_list |  identifier )  '=>'  (  ( block |  _expression )  )  )  )

anonymous_object_creation_expression ::=  ( 'new'  '{'  ( ( _anonymous_object_member_declarator (  ( ','  _anonymous_object_member_declarator )  )*  )  )?  ( ','  )?  '}'  )

implicit_object_creation_expression ::=  ( 'new'  argument_list ( initializer_expression )?  )

_anonymous_object_member_declarator ::=  (  (  ( name_equals _expression )  )  |  _expression )

array_creation_expression ::=   (  ( 'new'  array_type ( initializer_expression )?  )  )

initializer_expression ::=  ( '{'  ( ( _expression (  ( ','  _expression )  )*  )  )?  ( ','  )?  '}'  )

assignment_expression ::=   (  ( (  _expression )  assignment_operator (  _expression )  )  )

assignment_operator ::=  ( '='  |  '+='  |  '-='  |  '*='  |  '/='  |  '%='  |  '&='  |  '^='  |  '|='  |  '<<='  |  '>>='  |  '??='  )

await_expression ::=   (  ( 'await'  _expression )  )

cast_expression ::=   (  ( '('  (  _type )  ')'  (  _expression )  )  )

checked_expression ::=  ( ( 'checked'  '('  _expression ')'  )  |  ( 'unchecked'  '('  _expression ')'  )  )

conditional_access_expression ::=   (  ( (  _expression )  '?'  ( member_binding_expression |  element_binding_expression )  )  )

conditional_expression ::=   (  ( (  _expression )  '?'  (  _expression )  ':'  (  _expression )  )  )

declaration_expression ::=  ( (  _type )  (  identifier )  )

default_expression ::=   (  ( 'default'  ( ( '('  (  _type )  ')'  )  )?  )  )

element_access_expression ::=   (  ( (  _expression )  (  bracketed_argument_list )  )  )

element_binding_expression ::=  bracketed_argument_list

implicit_array_creation_expression ::=  ( 'new'  '['  (  ','  )*  ']'  initializer_expression )

implicit_stack_alloc_array_creation_expression ::=  ( 'stackalloc'  '['  ']'  initializer_expression )

base_expression ::=  'base'

this_expression ::=  'this'

interpolated_string_expression ::=  ( ( '$"'  (  _interpolated_string_content )*  '"'  )  |  ( '$@"'  (  _interpolated_verbatim_string_content )*  '"'  )  |  ( '@$"'  (  _interpolated_verbatim_string_content )*  '"'  )  )

_interpolated_string_content ::=  ( interpolated_string_text |  interpolation )

_interpolated_verbatim_string_content ::=  ( interpolated_verbatim_string_text |  interpolation )

interpolated_string_text ::=  ( '{{'  |  (   (  [^{"\\\n]+ )  )  |  escape_sequence )

interpolated_verbatim_string_text ::=  ( '{{'  |  [^{"]+ |  '""'  )

interpolation ::=  ( '{'  _expression ( interpolation_alignment_clause )?  ( interpolation_format_clause )?  '}'  )

interpolation_alignment_clause ::=  ( ','  _expression )

interpolation_format_clause ::=  ( ':'  [^}"]+ )

invocation_expression ::=   (  ( (  _expression )  (  argument_list )  )  )

is_pattern_expression ::=   (  ( (  _expression )  'is'  (  _pattern )  )  )

make_ref_expression ::=  ( '__makeref'  '('  _expression ')'  )

member_access_expression ::=   (  ( (  ( _expression |  predefined_type |  _name )  )  ( '.'  |  '->'  )  (  _simple_name )  )  )

member_binding_expression ::=  ( '.'  (  _simple_name )  )

object_creation_expression ::=   (  ( 'new'  (  _type )  (  ( argument_list )?  )  (  ( initializer_expression )?  )  )  )

parenthesized_expression ::=  ( '('  _expression ')'  )

postfix_unary_expression ::=   (  ( ( _expression '++'  )  |  ( _expression '--'  )  |  ( _expression '!'  )  )  )

prefix_unary_expression ::=   (  ( ( '!'  _expression )  |  ( '&'  _expression )  |  ( '*'  _expression )  |  ( '+'  _expression )  |  ( '++'  _expression )  |  ( '-'  _expression )  |  ( '--'  _expression )  |  ( '^'  _expression )  |  ( '~'  _expression )  )  )

query_expression ::=  ( from_clause _query_body )

from_clause ::=  ( 'from'  ( _type )?  identifier 'in'  _expression )

_query_body ::=   (  ( (  _query_clause )*  _select_or_group_clause ( query_continuation )?  )  )

_query_clause ::=  ( from_clause |  join_clause |  let_clause |  order_by_clause |  where_clause )

join_clause ::=  ( 'join'  ( _type )?  identifier 'in'  _expression 'on'  _expression 'equals'  _expression ( join_into_clause )?  )

join_into_clause ::=  ( 'into'  identifier )

let_clause ::=  ( 'let'  identifier '='  _expression )

order_by_clause ::=  ( 'orderby'  ( _ordering (  ( ','  _ordering )  )*  )  )

_ordering ::=  ( _expression ( ( 'ascending'  |  'descending'  )  )?  )

where_clause ::=  ( 'where'  _expression )

_select_or_group_clause ::=  ( group_clause |  select_clause )

group_clause ::=   (  ( 'group'  _expression 'by'  _expression )  )

select_clause ::=   (  ( 'select'  _expression )  )

query_continuation ::=  ( 'into'  identifier _query_body )

range_expression ::=   (  ( ( _expression )?  '..'  ( _expression )?  )  )

ref_expression ::=   (  ( 'ref'  _expression )  )

ref_type_expression ::=  ( '__reftype'  '('  _expression ')'  )

ref_value_expression ::=  ( '__refvalue'  '('  (  _expression )  ','  (  _type )  ')'  )

size_of_expression ::=  ( 'sizeof'  '('  _type ')'  )

stack_alloc_array_creation_expression ::=  ( 'stackalloc'  array_type ( initializer_expression )?  )

switch_expression ::=   (  ( _expression 'switch'  '{'  ( ( switch_expression_arm (  ( ','  switch_expression_arm )  )*  )  )?  ( ','  )?  '}'  )  )

switch_expression_arm ::=  ( _pattern ( when_clause )?  '=>'  _expression )

throw_expression ::=   (  ( 'throw'  _expression )  )

tuple_expression ::=  ( '('  argument ( ( ','  argument )  )+  ')'  )

type_of_expression ::=  ( 'typeof'  '('  _type ')'  )

with_expression ::=  ( _expression 'with'  '{'  ( with_initializer_expression )?  '}'  )

with_initializer_expression ::=  ( simple_assignment_expression (  ( ','  simple_assignment_expression )  )*  )

simple_assignment_expression ::=  ( identifier '='  _expression )

_expression ::=  ( anonymous_method_expression |  anonymous_object_creation_expression |  array_creation_expression |  as_expression |  assignment_expression |  await_expression |  base_expression |  binary_expression |  cast_expression |  checked_expression |  conditional_access_expression |  conditional_expression |  default_expression |  element_access_expression |  element_binding_expression |  implicit_array_creation_expression |  implicit_object_creation_expression |  implicit_stack_alloc_array_creation_expression |  initializer_expression |  interpolated_string_expression |  invocation_expression |  is_expression |  is_pattern_expression |  lambda_expression |  make_ref_expression |  member_access_expression |  object_creation_expression |  parenthesized_expression |  postfix_unary_expression |  prefix_unary_expression |  query_expression |  range_expression |  ref_expression |  ref_type_expression |  ref_value_expression |  size_of_expression |  stack_alloc_array_creation_expression |  switch_expression |  this_expression |  throw_expression |  tuple_expression |  type_of_expression |  with_expression |  _simple_name |  _literal )

binary_expression ::=  (  (  ( (  _expression )  (  '&&'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '||'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '>>'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '<<'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '&'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '^'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '|'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '+'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '-'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '*'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '/'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '%'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '<'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '<='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '=='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '!='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '>='  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '>'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '??'  )  (  _expression )  )  )  )

as_expression ::=   (  ( (  _expression )  (  'as'  )  (  _type )  )  )

is_expression ::=   (  ( (  _expression )  (  'is'  )  (  _type )  )  )

_identifier_token ::=  (  ( ( '@'  )?  [a-zA-Zα-ωΑ-Ωµ_][a-zA-Zα-ωΑ-Ωµ_0-9]* )  )*

identifier ::=  ( _identifier_token |  _contextual_keywords )

global ::=  'global'

_identifier_or_global ::=  ( global |  identifier )

_literal ::=  ( null_literal |  boolean_literal |  character_literal |  real_literal |  integer_literal |  string_literal |  verbatim_string_literal )

boolean_literal ::=  ( 'true'  |  'false'  )

character_literal ::=  ( "'"  ( (  [^'\\] )  |  escape_sequence )  "'"  )

escape_sequence ::=  (  ( '\x'[0-9a-fA-F][0-9a-fA-F]?[0-9a-fA-F]?[0-9a-fA-F]? |  '\u'[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F] |  '\U'[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F] |  '\'[^xuU] )  )*

integer_literal ::=  (  ( ( ([0-9][0-9_]*[0-9]|[0-9]) |  '0'[xX][0-9a-fA-F_]*[0-9a-fA-F]+ |  '0'[bB][01_]*[01]+ )  ( 'u'|'U'|'l'|'L'|'ul'|'UL'|'uL'|'Ul'|'lu'|'LU'|'Lu'|'lU' )?  )  )*

null_literal ::=  'null'

real_literal ::=  (  ( ( ([0-9][0-9_]*[0-9]|[0-9]) '.'  ([0-9][0-9_]*[0-9]|[0-9]) ( [eE][+-]?[0-9][0-9_]* )?  ( [fFdDmM] )?  )  |  ( '.'  ([0-9][0-9_]*[0-9]|[0-9]) ( [eE][+-]?[0-9][0-9_]* )?  ( [fFdDmM] )?  )  |  ( ([0-9][0-9_]*[0-9]|[0-9]) [eE][+-]?[0-9][0-9_]* ( [fFdDmM] )?  )  |  ( ([0-9][0-9_]*[0-9]|[0-9]) [fFdDmM] )  )  )*

string_literal ::=  ( '"'  (  ( (   (  [^"\\\n]+ )  )  |  escape_sequence )  )*  '"'  )

verbatim_string_literal ::=  (  ( '@"'  (  ( [^"] |  '""'  )  )*  '"'  )  )*

comment ::=  (  ( ( '//'  .* )  |  ( '/*'  (  ( [^*] |  '*'[^/] )  )*  '*/'  )  )  )*

_contextual_keywords ::=  ( 'ascending'  |  'by'  |  'descending'  |  'equals'  |  'from'  |  'group'  |  'into'  |  'join'  |  'let'  |  'on'  |  'orderby'  |  'select'  |  'where'  |  'add'  |  'get'  |  'remove'  |  'set'  |  'global'  |  'alias'  |  'dynamic'  |  'nameof'  |  'notnull'  |  'unmanaged'  |  'when'  |  'yield'  )

return_type ::=  ( _type |  void_keyword )

void_keyword ::=  'void'

preprocessor_call ::=  ( preprocessor_directive (  ( identifier |  _literal |  (   (  [^\s]+ )  )*  )  )*  _preproc_directive_end )

preprocessor_directive ::=  '#'[ \t]*[a-z][\w]*
