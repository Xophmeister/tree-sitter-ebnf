program ::=  ( (  _statement )*  ( return_statement )?  )

return_statement ::=  ( 'return'  ( ( _expression (  ( ','  _expression )  )*  )  )?  ( _empty_statement )?  )

_statement ::=  ( (  _expression )  |  variable_declaration |  local_variable_declaration |  do_statement |  if_statement |  while_statement |  repeat_statement |  for_statement |  for_in_statement |  goto_statement |  break_statement |  label_statement |  _empty_statement |  (  function_statement )  |  (  local_function_statement )  |  (  function_call_statement )  )

variable_declaration ::=  ( ( (  _variable_declarator )  (  ( ','  (  _variable_declarator )  )  )*  )  '='  ( _expression (  ( ','  _expression )  )*  )  )

local_variable_declaration ::=  ( 'local'  (  _local_variable_declarator )  ( ( '='  ( _expression (  ( ','  _expression )  )*  )  )  )?  )

_variable_declarator ::=  ( identifier |  ( _prefix '['  _expression ']'  )  |  field_expression )

field_expression ::=  ( _prefix '.'  (  identifier )  )

_local_variable_declarator ::=  ( identifier (  ( ','  identifier )  )*  )

do_statement ::=  ( 'do'  (  _statement )*  ( return_statement )?  'end'  )

if_statement ::=  ( 'if'  (  _expression )  'then'  (  _statement )*  ( return_statement )?  (  elseif )*  ( else )?  'end'  )

elseif ::=  ( 'elseif'  (  _expression )  'then'  (  _statement )*  ( return_statement )?  )

else ::=  ( 'else'  (  _statement )*  ( return_statement )?  )

while_statement ::=  ( 'while'  (  _expression )  'do'  (  _statement )*  ( return_statement )?  'end'  )

repeat_statement ::=  ( 'repeat'  (  _statement )*  ( return_statement )?  'until'  (  _expression )  )

for_statement ::=  ( 'for'  (  _loop_expression )  'do'  (  _statement )*  ( return_statement )?  'end'  )

for_in_statement ::=  ( 'for'  (  _in_loop_expression )  'do'  (  _statement )*  ( return_statement )?  'end'  )

_loop_expression ::=  ( identifier '='  _expression ','  _expression ( ( ','  _expression )  )?  )

_in_loop_expression ::=  ( ( identifier (  ( ','  identifier )  )*  )  'in'  ( _expression (  ( ','  _expression )  )*  )  )

goto_statement ::=  ( 'goto'  identifier )

break_statement ::=  'break'

label_statement ::=  ( '::'  identifier '::'  )

_empty_statement ::=  ';'

function_statement ::=  ( 'function'  function_name _function_body )

local_function_statement ::=  ( 'local'  'function'  identifier _function_body )

function_call_statement ::=   (  ( ( _prefix arguments )  |  ( _prefix ':'  (  identifier )  arguments )  )  )

arguments ::=  ( ( '('  ( ( _expression (  ( ','  _expression )  )*  )  )?  ')'  )  |  table |  string )

function_name ::=  ( ( identifier |  function_name_field )  ( ( ':'  (  identifier )  )  )?  )

function_name_field ::=  ( (  identifier )  (  ( '.'  (  identifier )  )  )*  )

parameters ::=  ( '('  ( ( ( self |  spread |  identifier )  (  ( ','  identifier )  )*  ( ( ','  spread )  )?  )  )?  ')'  )

_function_body ::=  ( parameters (  _statement )*  ( return_statement )?  'end'  )

_expression ::=  ( spread |  _prefix |  next |  function_definition |  table |  binary_operation |  unary_operation |  string |  number |  nil |  true |  false |  identifier )

spread ::=  '...'

self ::=  'self'

next ::=  'next'

global_variable ::=  ( '_G'  |  '_VERSION'  )

_prefix ::=  ( self |  global_variable |  _variable_declarator |   (  (  function_call_statement )  )  |  ( '('  _expression ')'  )  )

function_definition ::=  ( 'function'  _function_body )

table ::=  ( '{'  ( _field_sequence )?  '}'  )

field ::=  ( ( '['  _expression ']'  '='  _expression )  |  ( identifier '='  _expression )  |  _expression )

_field_sequence ::=   (  ( field (  ( _field_sep field )  )*  ( _field_sep )?  )  )

_field_sep ::=  ( ','  |  ';'  )

binary_operation ::=  (  (  ( _expression 'or'  _expression )  )  |   (  ( _expression 'and'  _expression )  )  |   (  ( _expression '<'  _expression )  )  |   (  ( _expression '<='  _expression )  )  |   (  ( _expression '=='  _expression )  )  |   (  ( _expression '~='  _expression )  )  |   (  ( _expression '>='  _expression )  )  |   (  ( _expression '>'  _expression )  )  |   (  ( _expression '|'  _expression )  )  |   (  ( _expression '~'  _expression )  )  |   (  ( _expression '&'  _expression )  )  |   (  ( _expression '<<'  _expression )  )  |   (  ( _expression '>>'  _expression )  )  |   (  ( _expression '+'  _expression )  )  |   (  ( _expression '-'  _expression )  )  |   (  ( _expression '*'  _expression )  )  |   (  ( _expression '/'  _expression )  )  |   (  ( _expression '//'  _expression )  )  |   (  ( _expression '%'  _expression )  )  |   (  ( _expression '..'  _expression )  )  |   (  ( _expression '^'  _expression )  )  )

unary_operation ::=   (  ( ( 'not'  |  '#'  |  '-'  |  '~'  )  _expression )  )

number ::=  (  ( ( ( ( '0'  |  ( ( '0'  )?  [1-9] ( [0-9]+ )?  )  )  '.'  ( [0-9]+ )?  ( ( ( 'e'  |  'E'  )  ( ( ( '-'  |  '+'  )  )?  [0-9]+ )  )  )?  )  |  ( '.'  [0-9]+ ( ( ( 'e'  |  'E'  )  ( ( ( '-'  |  '+'  )  )?  [0-9]+ )  )  )?  )  |  ( ( '0'  |  ( ( '0'  )?  [1-9] ( [0-9]+ )?  )  )  ( ( ( 'e'  |  'E'  )  ( ( ( '-'  |  '+'  )  )?  [0-9]+ )  )  )?  )  )  |  ( ( '0x'  |  '0X'  )  [a-fA-F0-9]+ ( ( '.'  [a-fA-F0-9]+ )  )?  ( ( ( 'p'  |  'P'  )  ( ( ( '-'  |  '+'  )  )?  [0-9]+ )  )  )?  )  )  )*

nil ::=  'nil'

true ::=  'true'

false ::=  'false'

identifier ::=  [a-zA-Z_][a-zA-Z0-9_]*
