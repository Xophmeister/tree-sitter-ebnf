/*
Grammar originally from https://github.com/tree-sitter/tree-sitter-ruby
Converted by excuting:
	qjs json2ebnf.js
Then manualy fixing the problems reported by https://www.bottlecaps.de/rr/ui in a way to allow visualization (correctnes is not the priority now)
*/

program ::=  ( ( _statements )?  ( ( '__END__'  _line_break uninterpreted )  )?  )

uninterpreted ::=  ([.]|[\s])*

_statements ::=  ( ( ( ( ( _statement _terminator )  |  empty_statement )  )+  ( _statement )?  )  |  _statement )

begin_block ::=  ( 'BEGIN'  '{'  ( _statements )?  '}'  )

end_block ::=  ( 'END'  '{'  ( _statements )?  '}'  )

_statement ::=  ( undef |  alias |  if_modifier |  unless_modifier |  while_modifier |  until_modifier |  rescue_modifier |  begin_block |  end_block |  _expression )

method ::=  ( 'def'  _method_rest )

singleton_method ::=  ( 'def'  ( ( (  _variable )  |  ( '('  (  _arg )  ')'  )  )  ( '.'  |  '::'  )  )  _method_rest )

_method_rest ::=  ( (  _method_name )  ( ( (  (  parameters )  )  ( _terminator )?  )  |  ( ( (  (  bare_parameters )  )  )?  _terminator )  )  _body_statement )

parameters ::=  ( '('  ( ( _formal_parameter (  ( ','  _formal_parameter )  )*  )  )?  ')'  )

bare_parameters ::=  ( _simple_formal_parameter (  ( ','  _formal_parameter )  )*  )

block_parameters ::=  ( '|'  ( ( ( _formal_parameter (  ( ','  _formal_parameter )  )*  )  )?  ( ','  )?  )  ( ( ';'  ( identifier (  ( ','  identifier )  )*  )  )  )?  '|'  )

_formal_parameter ::=  ( _simple_formal_parameter |  (  parameters )  )

_simple_formal_parameter ::=  ( identifier |  splat_parameter |  hash_splat_parameter |  block_parameter |  keyword_parameter |  optional_parameter )

splat_parameter ::=  ( '*'  (  ( identifier )?  )  )

hash_splat_parameter ::=  ( '**'  (  ( identifier )?  )  )

block_parameter ::=  ( '&'  (  identifier )  )

keyword_parameter ::=   (  ( (  identifier )  (  ':'  )  (  ( _arg )?  )  )  )

optional_parameter ::=   (  ( (  identifier )  '='  (  _arg )  )  )

class ::=  ( 'class'  (  ( constant |  scope_resolution )  )  (  ( superclass )?  )  _terminator _body_statement )

superclass ::=  ( '<'  _expression )

singleton_class ::=  ( 'class'  (  _singleton_class_left_angle_left_langle )  (  _arg )  _terminator _body_statement )

module ::=  ( 'module'  (  ( constant |  scope_resolution )  )  ( ( _terminator _body_statement )  |  'end'  )  )

return_command ::=   (  ( 'return'  (  command_argument_list )  )  )

yield_command ::=   (  ( 'yield'  (  command_argument_list )  )  )

break_command ::=   (  ( 'break'  (  command_argument_list )  )  )

next_command ::=   (  ( 'next'  (  command_argument_list )  )  )

return ::=   (  ( 'return'  ( argument_list )?  )  )

yield ::=   (  ( 'yield'  ( argument_list )?  )  )

break ::=   (  ( 'break'  ( argument_list )?  )  )

next ::=   (  ( 'next'  ( argument_list )?  )  )

redo ::=   (  ( 'redo'  ( argument_list )?  )  )

retry ::=   (  ( 'retry'  ( argument_list )?  )  )

if_modifier ::=   (  ( (  _statement )  'if'  (  _expression )  )  )

unless_modifier ::=   (  ( (  _statement )  'unless'  (  _expression )  )  )

while_modifier ::=   (  ( (  _statement )  'while'  (  _expression )  )  )

until_modifier ::=   (  ( (  _statement )  'until'  (  _expression )  )  )

rescue_modifier ::=   (  ( (  _statement )  'rescue'  (  _expression )  )  )

while ::=  ( 'while'  (  _statement )  (  do )  )

until ::=  ( 'until'  (  _statement )  (  do )  )

for ::=  ( 'for'  (  ( _lhs |  left_assignment_list )  )  (  in )  (  do )  )

in ::=  ( 'in'  _arg )

do ::=  ( ( 'do'  |  _terminator )  ( _statements )?  'end'  )

case ::=  ( 'case'  (  ( _statement )?  )  ( _terminator )?  (  when )*  ( else )?  'end'  )

when ::=  ( 'when'  ( (  pattern )  (  ( ','  (  pattern )  )  )*  )  ( _terminator |  (  then )  )  )

pattern ::=  ( _arg |  splat_argument )

if ::=  ( 'if'  (  _statement )  ( _terminator |  (  then )  )  (  ( ( else |  elsif )  )?  )  'end'  )

unless ::=  ( 'unless'  (  _statement )  ( _terminator |  (  then )  )  (  ( ( else |  elsif )  )?  )  'end'  )

elsif ::=  ( 'elsif'  (  _statement )  ( _terminator |  (  then )  )  (  ( ( else |  elsif )  )?  )  )

else ::=  ( 'else'  ( _terminator )?  ( _statements )?  )

then ::=  ( ( _terminator _statements )  |  ( ( _terminator )?  'then'  ( _statements )?  )  )

begin ::=  ( 'begin'  ( _terminator )?  _body_statement )

ensure ::=  ( 'ensure'  ( _statements )?  )

rescue ::=  ( 'rescue'  (  ( exceptions )?  )  (  ( exception_variable )?  )  ( _terminator |  (  then )  )  )

exceptions ::=  ( ( _arg |  splat_argument )  (  ( ','  ( _arg |  splat_argument )  )  )*  )

exception_variable ::=  ( '=>'  _lhs )

_body_statement ::=  ( ( _statements )?  (  ( rescue |  else |  ensure )  )*  'end'  )

_expression ::=  ( (  command_binary )  |  (  command_unary )  |  (  command_assignment )  |  (  command_operator_assignment )  |  (  command_call )  |  (  command_call_with_block )  |   (  (  _chained_command_call )  )  |  (  return_command )  |  (  yield_command )  |  (  break_command )  |  (  next_command )  |  _arg )

_arg ::=  ( _primary |  assignment |  operator_assignment |  conditional |  range |  binary |  unary )

_primary ::=  ( parenthesized_statements |  _lhs |  array |  string_array |  symbol_array |  hash |  subshell |  simple_symbol |  delimited_symbol |  integer |  float |  complex |  rational |  string |  character |  chained_string |  regex |  lambda |  method |  singleton_method |  class |  singleton_class |  module |  begin |  while |  until |  if |  unless |  for |  case |  return |  yield |  break |  next |  redo |  retry |  (  parenthesized_unary )  |  (  unary_literal )  |  heredoc_beginning )

parenthesized_statements ::=  ( '('  ( _statements )?  ')'  )

element_reference ::=   (  ( (  _primary )  (  _element_reference_bracket )  ( _argument_list_with_trailing_comma )?  ']'  )  )

scope_resolution ::=   (  ( ( '::'  |  ( (  _primary )  (  '::'  )  )  )  (  ( identifier |  constant )  )  )  )

_call ::=   (  ( (  _primary )  ( '.'  |  '&.'  )  (  ( identifier |  operator |  constant |  argument_list )  )  )  )

command_call ::=  ( ( _call |  _chained_command_call |  (  ( _variable |  scope_resolution )  )  )  (  (  command_argument_list )  )  )

command_call_with_block ::=  ( ( ( _call |  (  ( _variable |  scope_resolution )  )  )   (  ( (  (  command_argument_list )  )  (  block )  )  )  )  |  ( ( _call |  (  ( _variable |  scope_resolution )  )  )   (  ( (  (  command_argument_list )  )  (  do_block )  )  )  )  )

_chained_command_call ::=  ( (  (  command_call_with_block )  )  ( '.'  |  '&.'  )  (  ( identifier |  operator |  constant |  argument_list )  )  )

call ::=  ( ( ( _call |  (  ( _variable |  scope_resolution )  )  )  (  argument_list )  )  |  ( ( _call |  (  ( _variable |  scope_resolution )  )  )   (  ( (  argument_list )  (  block )  )  )  )  |  ( ( _call |  (  ( _variable |  scope_resolution )  )  )   (  ( (  argument_list )  (  do_block )  )  )  )  |   (  ( ( _call |  (  ( _variable |  scope_resolution )  )  )  (  block )  )  )  |   (  ( ( _call |  (  ( _variable |  scope_resolution )  )  )  (  do_block )  )  )  )

command_argument_list ::=   (  ( _argument (  ( ','  _argument )  )*  )  )

argument_list ::=   (  ( (  '('  )  ( _argument_list_with_trailing_comma )?  ')'  )  )

_argument_list_with_trailing_comma ::=   (  ( ( _argument (  ( ','  _argument )  )*  )  ( ','  )?  )  )

_argument ::=   (  ( _expression |  splat_argument |  hash_splat_argument |  block_argument |  pair )  )

splat_argument ::=  ( (  _splat_star )  _arg )

hash_splat_argument ::=  ( (  _hash_splat_star_star )  _arg )

block_argument ::=  ( (  _block_ampersand )  _arg )

do_block ::=  ( 'do'  ( _terminator )?  ( ( (  block_parameters )  ( _terminator )?  )  )?  _body_statement )

block ::=   (  ( '{'  (  ( block_parameters )?  )  ( _statements )?  '}'  )  )

assignment ::=   (  ( ( (  ( _lhs |  left_assignment_list )  )  '='  (  ( _arg |  splat_argument |  right_assignment_list )  )  )  )  )

command_assignment ::=   (  ( ( (  ( _lhs |  left_assignment_list )  )  '='  (  _expression )  )  )  )

operator_assignment ::=   (  ( (  _lhs )  (  ( '+='  |  '-='  |  '*='  |  '**='  |  '/='  |  '||='  |  '|='  |  '&&='  |  '&='  |  '%='  |  '>>='  |  '<<='  |  '^='  )  )  (  _arg )  )  )

command_operator_assignment ::=   (  ( (  _lhs )  (  ( '+='  |  '-='  |  '*='  |  '**='  |  '/='  |  '||='  |  '|='  |  '&&='  |  '&='  |  '%='  |  '>>='  |  '<<='  |  '^='  )  )  (  _expression )  )  )

conditional ::=   (  ( (  _arg )  '?'  (  _arg )  ':'  (  _arg )  )  )

range ::=   (  ( ( (  _arg )  (  ( '..'  |  '...'  )  )  (  _arg )  )  |  ( (  ( '..'  |  '...'  )  )  (  _arg )  )  |  ( (  _arg )  (  ( '..'  |  '...'  )  )  )  )  )

binary ::=  (  (  ( (  _arg )  (  'and'  )  (  _arg )  )  )  |   (  ( (  _arg )  (  'or'  )  (  _arg )  )  )  |   (  ( (  _arg )  (  '||'  )  (  _arg )  )  )  |   (  ( (  _arg )  (  '&&'  )  (  _arg )  )  )  |   (  ( (  _arg )  (  ( '<<'  |  '>>'  )  )  (  _arg )  )  )  |   (  ( (  _arg )  (  ( '<'  |  '<='  |  '>'  |  '>='  )  )  (  _arg )  )  )  |   (  ( (  _arg )  (  '&'  )  (  _arg )  )  )  |   (  ( (  _arg )  (  ( '^'  |  '|'  )  )  (  _arg )  )  )  |   (  ( (  _arg )  (  ( '+'  |  (  _binary_minus )  )  )  (  _arg )  )  )  |   (  ( (  _arg )  (  ( '/'  |  '%'  |  (  _binary_star )  )  )  (  _arg )  )  )  |   (  ( (  _arg )  (  ( '=='  |  '!='  |  '==='  |  '<=>'  |  '=~'  |  '!~'  )  )  (  _arg )  )  )  |   (  ( (  _arg )  (  (  _binary_star_star )  )  (  _arg )  )  )  )

command_binary ::=   (  ( (  _expression )  (  ( 'or'  |  'and'  )  )  (  _expression )  )  )

unary ::=  (  (  ( (  'defined?'  )  (  _arg )  )  )  |   (  ( (  'not'  )  (  _arg )  )  )  |   (  ( (  ( (  _unary_minus )  |  '+'  )  )  (  _arg )  )  )  |   (  ( (  ( '!'  |  '~'  )  )  (  _arg )  )  )  )

command_unary ::=  (  (  ( (  'defined?'  )  (  _expression )  )  )  |   (  ( (  'not'  )  (  _expression )  )  )  |   (  ( (  ( (  _unary_minus )  |  '+'  )  )  (  _expression )  )  )  |   (  ( (  ( '!'  |  '~'  )  )  (  _expression )  )  )  )

parenthesized_unary ::=   (  ( (  ( 'defined?'  |  'not'  )  )  (  parenthesized_statements )  )  )

unary_literal ::=   (  ( (  ( (  _unary_minus )  |  '+'  )  )  (  ( integer |  float )  )  )  )

right_assignment_list ::=   (  ( ( _arg |  splat_argument )  (  ( ','  ( _arg |  splat_argument )  )  )*  )  )

left_assignment_list ::=  _mlhs

_mlhs ::=   (  ( ( ( _lhs |  rest_assignment |  destructured_left_assignment )  (  ( ','  ( _lhs |  rest_assignment |  destructured_left_assignment )  )  )*  )  ( ','  )?  )  )

destructured_left_assignment ::=   (  ( '('  _mlhs ')'  )  )

rest_assignment ::=   (  ( '*'  ( _lhs )?  )  )

_lhs ::=   (  ( _variable |  true |  false |  nil |  scope_resolution |  element_reference |  (  _call )  |  call )  )

_variable ::=   (  ( self |  super |  instance_variable |  class_variable |  global_variable |  identifier |  constant )  )

operator ::=  ( '..'  |  '|'  |  '^'  |  '&'  |  '<=>'  |  '=='  |  '==='  |  '=~'  |  '>'  |  '>='  |  '<'  |  '<='  |  '+'  |  '-'  |  '*'  |  '/'  |  '%'  |  '!'  |  '!~'  |  '**'  |  '<<'  |  '>>'  |  '~'  |  '+@'  |  '-@'  |  '[]'  |  '[]='  |  '`'  )

_method_name ::=  ( identifier |  constant |  setter |  simple_symbol |  delimited_symbol |  operator |  instance_variable |  class_variable |  global_variable )

setter ::=  ( (  identifier )  '='  )

undef ::=  ( 'undef'  ( _method_name (  ( ','  _method_name )  )*  )  )

alias ::=  ( 'alias'  (  _method_name )  (  _method_name )  )

comment ::=  (   (  ( ( '#'  [^\n]* )  |  ( '=begin' [^\r\n]*[\r]?[\n] (  ( [^=] |  '='[^e] |  '=e'[^n] |  '=en'[^d] )  )*  '=end' )  )  )  )

integer ::=  '0'[bB][01]('_'?[01])*|'0'[oO]?[0-7]('_'?[0-7])*|('0'[dD])?[0-9]('_'?[\d])*|'0'[xX][0-9a-fA-F]('_'?[0-9a-fA-F])*

float ::=  [0-9]('_'?[\d])*([.\d])?('_'?[\d])*([eE][+-]?[\d]('_'?[\d])*)?

complex ::=  ([0-9]+)?([+]|[-])?([\d]+)'i'

rational ::=  ( ( integer |  float )  'r'  )

super ::=  'super'

self ::=  'self'

true ::=  (  ( 'true'  |  'TRUE'  )  )

false ::=  (  ( 'false'  |  'FALSE'  )  )

nil ::=  (  ( 'nil'  |  'NIL'  )  )

constant ::=  (  ( [A-Z] [^\x00-\x1F\s:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}]* ('?'|'!')? )  )

identifier ::=  (  ( [^\x00-\x1F\sA-Z0-9:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}] [^\x00-\x1F\s:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}]* ('?'|'!')? )  )

instance_variable ::=  (  ( '@'  [^\x00-\x1F\s0-9:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}] [^\x00-\x1F\s:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}]* )  )

class_variable ::=  (  ( '@@'  [^\x00-\x1F\s0-9:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}] [^\x00-\x1F\s:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[#x5d{}]* )  )

global_variable ::=  '$-'?(([!@&`'+~=/\\,;.<>*$?:"])|([0-9]*)|([a-zA-Z_][a-zA-Z0-9_]*))

chained_string ::=  ( string ( string )+  )

character ::=  '\'?('\\'[\S]('{'[0-9A-Fa-f]*'}'|[0-9A-Fa-f]*|'-'[\S]([MC]'-'[\S])?)?|[\S])

interpolation ::=  ( '#{'  ( _statements )?  '}'  )

string ::=  ( (  _string_start )  ( _literal_contents )?  (  _string_end )  )

subshell ::=  ( (  _subshell_start )  ( _literal_contents )?  (  _string_end )  )

string_array ::=  ( (  _string_array_start )  ( [\s]+ )?  ( ( (  _literal_contents )  (  ( [\s]+ (  _literal_contents )  )  )*  )  )?  ( [\s]+ )?  (  _string_end )  )

symbol_array ::=  ( (  _symbol_array_start )  ( [\s]+ )?  ( ( (  _literal_contents )  (  ( [\s]+ (  _literal_contents )  )  )*  )  )?  ( [\s]+ )?  (  _string_end )  )

delimited_symbol ::=  ( (  _symbol_start )  ( _literal_contents )?  (  _string_end )  )

regex ::=  ( (  _regex_start )  ( _literal_contents )?  (  _string_end )  )

heredoc_body ::=  ( _heredoc_body_start (  ( heredoc_content |  interpolation |  escape_sequence )  )*  heredoc_end )

_literal_contents ::=  ( ( string_content |  interpolation |  escape_sequence )  )+

escape_sequence ::=  (  ( '\\'  ( [^ux0-7] |  'x'[0-9a-fA-F]+/*{1,2}*/ |  [0-7]+/*{1,3}*/ |  'u'[0-9a-fA-F]+/*{4}*/ |  'u{'[0-9a-fA-F ]+'}' )  )  )

array ::=  ( '['  ( _argument_list_with_trailing_comma )?  ']'  )

hash ::=  ( '{'  ( ( ( ( pair |  hash_splat_argument )  (  ( ','  ( pair |  hash_splat_argument )  )  )*  )  ( ','  )?  )  )?  '}'  )

pair ::=  ( ( (  _arg )  '=>'  (  _arg )  )  |  ( (  ( hash_key_symbol |  (  identifier )  |  (  constant )  |  string )  )  (  ':'  )  (  _arg )  )  )

lambda ::=  ( '->'  (  ( ( (  parameters )  |  (  bare_parameters )  )  )?  )  (  ( block |  do_block )  )  )

empty_statement ::=   (  ';'  )

_terminator ::=  ( _line_break |  ';'  )

