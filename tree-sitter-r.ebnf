/*
Grammar originally from https://github.com/r-lib/tree-sitter-r
Converted by excuting:
	qjs json2ebnf.js
Then manualy fixing the problems reported by https://www.bottlecaps.de/rr/ui in a way to allow visualization (correctnes is not the priority now)
*/

program ::=  (  ( _expression ( ( '\n'  |  ';'  )  )?  )  )*

_definition ::=  ( function_definition )

function_definition ::=   (  ( 'function'  formal_parameters _expression )  )

if ::=   (  ( 'if'  '('  (  _expression )  ')'  (  _expression )  (  ( ( 'else'  _expression )  )?  )  )  )

while ::=   (  ( 'while'  '('  (  _expression )  ')'  (  _expression )  )  )

repeat ::=   (  ( 'repeat'  (  _expression )  )  )

for ::=   (  ( 'for'  '('  (  identifier )  'in'  (  _expression )  ')'  (  _expression )  )  )

switch ::=  ( 'switch'  '('  (  _expression )  ','  (  arguments )  ')'  )

formal_parameters ::=  ( '('  ( ( ( _formal_parameter (  ( ','  _formal_parameter )  )*  )  ( ','  )?  )  )?  ')'  )

_formal_parameter ::=  ( identifier |  ( ( identifier |  string |  dots )  '='  _expression )  |  dots )

block ::=  ( '{'  (  _expression )*  '}'  )

arguments ::=  ( ( _argument |  ','  )  )+

_argument ::=   (  ( (  _expression )  |  ( (  ( identifier |  string |  dots )  )  '='  (  ( _expression )?  )  )  )  )

call ::=   (  ( (  _expression )  '('  (  ( arguments )?  )  ')'  )  )

_assignment ::=  ( equals_assignment |  left_assignment |  left_assignment2 |  right_assignment |  super_assignment )

left_assignment ::=   (  ( (  _expression )  '<-'  (  _expression )  )  )

left_assignment2 ::=   (  ( (  _expression )  ':='  (  _expression )  )  )

equals_assignment ::=   (  ( (  _expression )  '='  (  _expression )  )  )

super_assignment ::=   (  ( (  _expression )  '<<-'  (  _expression )  )  )

right_assignment ::=   (  ( (  _expression )  '->'  (  _expression )  )  )

brace_list ::=  ( '{'  (  ( _expression ( ( '\n'  |  ';'  )  )?  )  )*  '}'  )

paren_list ::=  ( '('  (  _expression )*  ')'  )

subset ::=   (  ( _expression '['  ( arguments )?  ']'  )  )

subset2 ::=   (  ( _expression '[['  ( arguments )?  ']]'  )  )

dollar ::=   (  ( _expression '$'  ( identifier |  string )  )  )

slot ::=   (  ( _expression '@'  identifier )  )

namespace_get ::=   (  ( (  identifier )  '::'  (  identifier )  )  )

namespace_get_internal ::=   (  ( (  identifier )  ':::'  (  identifier )  )  )

dots ::=  '...'

unary ::=  (  (  ( (  ( '-'  |  '+'  )  )  (  _expression )  )  )  |   (  ( (  '!'  )  (  _expression )  )  )  |   (  ( (  '~'  )  (  _expression )  )  )  )

binary ::=  (  (  ( (  _expression )  (  ( '+'  |  '-'  )  )  (  _expression )  )  )  |   (  ( (  _expression )  (  ( '*'  |  '/'  )  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '^'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  ( '<'  |  '>'  |  '<='  |  '>='  |  '=='  |  '!='  )  )  (  _expression )  )  )  |   (  ( (  _expression )  (  ( '||'  |  '|'  )  )  (  _expression )  )  )  |   (  ( (  _expression )  (  ( '&&'  |  '&'  )  )  (  _expression )  )  )  |   (  ( (  _expression )  (  special )  (  _expression )  )  )  |   (  ( (  _expression )  (  ':'  )  (  _expression )  )  )  |   (  ( (  _expression )  (  '~'  )  (  _expression )  )  )  )

break ::=  'break'

next ::=  'next'

true ::=  'TRUE'

false ::=  'FALSE'

null ::=  'NULL'

inf ::=  'Inf'

nan ::=  'NaN'

na ::=  ( 'NA'  |  'NA_character_'  |  'NA_complex_'  |  'NA_integer_'  |  'NA_real_'  )

_expression ::=   (  ( identifier |  integer |  float |  complex |  string |  call |  function_definition |  _assignment |  brace_list |  paren_list |  binary |  unary |  subset |  subset2 |  dollar |  slot |  namespace_get |  namespace_get_internal |  if |  for |  while |  repeat |  switch |  break |  next |  true |  false |  null |  inf |  nan |  na |  dots |  ';'  )  )

identifier ::=  ( [A-Za-z.][A-Za-z0-9_.]* |  ( '`'  (  ( [^`\\\n]+|'\\\r'?'\n' |  escape_sequence )  )*  '`'  )  )

integer ::=  (   (  ( ( ( ( '0x'  |  '0X'  )  [A-Fa-f0-9]+ )  |  [0-9]+ )  'L'  )  )  )

float ::=  (   (  ( ( ( [0-9] )+  ( '.'  )?  ( ( [0-9] )+  )?  ( ( [eE][\+-]? ( [0-9] )+  )  )?  )  |  ( ( ( [0-9] )+  )?  '.'  ( [0-9] )+  ( ( [eE][\+-]? ( [0-9] )+  )  )?  )  |  ( ( [0-9] )+  ( [eE][\+-]? ( [0-9] )+  )  )  |  ( ( '0x'  |  '0X'  )  [A-Fa-f0-9]+ )  )  )  )

complex ::=  ( float 'i'  )

comment ::=  (   (  ( '#'  .* )  )  )

string ::=  ( ( '"'  (  ( [^"\\\n]+|'\\\r'?'\n' |  escape_sequence )  )*  '"'  )  |  ( "'"  (  ( [^'\\\n]+|'\\\r'?'\n' |  escape_sequence )  )*  "'"  )  )

special ::=  ( '%'  (  ( [^%\\\n]+|'\\\r'?'\n' |  escape_sequence )  )*  '%'  )

escape_sequence ::=  (  ( '\\'  ( [^xu0-7] |  [0-7]+/*{1,3}*/ |  'x'[0-9a-fA-F]+/*{2}*/ |  'u'[0-9a-fA-F]+/*{4}*/ |  'u{'[0-9a-fA-F]+'}' )  )  )

